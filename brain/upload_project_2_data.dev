#!/usr/bin/perl -w

#   $URL: https://intrarad.ucsf.edu/svn/rad_software/surbeck/brain/DB/nelson_ncvi/trunk/data_upload_qr_scripts/upload_project_2_data $
#   $Rev: 31671 $
#   $Author: jasonc@RADIOLOGY.UCSF.EDU $
#   $Date: 2014-05-21 10:02:56 -0700 (Wed, 21 May 2014) $
#
#

use strict;
use DBI;
use DBD::Pg;
use Getopt::Long;
Getopt::Long::config("bundling");
use Pod::Usage;
use File::Spec;
use Date::Parse;
use Cwd;
use Cwd 'abs_path';
require SET_BRAIN_MODULES;
use Spreadsheet::ParseExcel;

##########################################################################
#
#  These constants will be used as the keys to a hash for each row in the 
#  spreadsheet. Each key is a column.
#
##########################################################################
use constant BRAIN_ID_KEY                     => "brain_id";
use constant MRN_KEY                          => "mrn";
use constant EXAM_ID_KEY                      => "exam_id";
use constant SF_NUMBER_KEY                    => "sf_number";
use constant CURRENT_SURGERY_DATE_KEY         => "current_surgery_date";
use constant CURRENT_GRADE_KEY                => "current_grade";
use constant CURRENT_HIST_TYPE_KEY            => "current_hist_type";
use constant CURRENT_SURGERY_NAVIGATION_KEY   => "current_surgery_navigation";
use constant CURRENT_SURGERY_SCREENSHOTS_KEY  => "current_surgery_screenshots";
use constant ORIGINAL_SURGERY_DATE_KEY        => "original_surgery_date";
use constant ORIGINAL_GRADE_KEY               => "original_grade";
use constant ORIGINAL_HIST_TYPE_KEY           => "original_hist_type";

sub get_mrn_from_brain_id( $ );
sub print_row( $ );
sub clean_row( $ );
sub get_hash_key( $ );
sub upload_current_diagnosis( $ );
sub upload_prior_diagnosis( $ );
sub upload_surgery_acquisition_info( $ );
sub execute_diagnosis_script( $$$$$$$$$$ );
sub trim( $ );

my $script    = $0;
our $dbh; 
our $xl_row; 
our $xl_col; 
our $study = "P01_PREOP_REC"; 

GetOptions(
    "f=s"             => \my $filename,
    "d"               => \my $debug,
    "current_surgery" => \my $current_surgery,
    "prior_surgery"   => \my $prior_surgery,
    "acquisition"     => \my $acquisition,
    "c"               => \my $commit
) or pod2usage(-verbose=>2, -exitval=>2);

if (!defined $filename ) {
    pod2usage(-verbose=>2, -exitval=>2);
}

if( $debug ) {
    dbutils_turn_debug_on();
}

########################## 
#   Connect to DB:
##########################
BRAIN_DB::brain_db_set_env( $script );
$dbh = BRAIN_DB::brain_db_get_connection();

my $parser   = Spreadsheet::ParseExcel->new();

# Lets define all the hash keys we are going to use

my $workbook = $parser->parse($filename);

if ( !defined $workbook ) {
    die $parser->error(), ".\n";
}
for my $worksheet ( $workbook->worksheet('Project 2-all') ) {

    
    my ( $row_min, $row_max ) = $worksheet->row_range();
    my ( $col_min, $col_max ) = $worksheet->col_range();
    # We know the first row is the headings.
    $row_min +=1; 

    for $xl_row ( $row_min .. $row_max ) {
        my %fields = ();
        for $xl_col ( $col_min .. $col_max ) {
            my $cell    = $worksheet->get_cell( $xl_row, $xl_col );
            if( defined( $cell ) && $cell->value() ne "" ) {

                # Check to see if this column is in our hash
                my $key = get_hash_key( $xl_col );
                if( $key ne "" ) {
                    $fields{$key} = trim($cell->value());
                } 
            } 
        }

        # Clean the data
        %fields = clean_row(\%fields);

        ############################################################################
        # Validate Exam ID 
        ############################################################################
        if (defined($fields{EXAM_ID_KEY()}) && $fields{EXAM_ID_KEY()} ne "" && $fields{EXAM_ID_KEY()} !~/^\d+$/) {
            print "WARNING: Invalid exam id <$fields{EXAM_ID_KEY()}> will be ignored\n";
            $fields{EXAM_ID_KEY()} = "";
        }


        ############################################################################
        # Validate SF number, set to empty if not recognized 
        ############################################################################
        if (defined($fields{SF_NUMBER_KEY()}) && $fields{SF_NUMBER_KEY()} !~/^\d+$/) {
            print "WARNING: Invalid sf number <$fields{SF_NUMBER_KEY()}> will be ignored.\n";
            $fields{SF_NUMBER_KEY()} = "";
        }

        print_row(\%fields);


        ############################################################################
        # Validate MRN, continue if it cannot be identified
        ############################################################################
        if ($fields{BRAIN_ID_KEY()} !~/^\d+$/) {
            print "ERROR: Invalid brain id <$fields{BRAIN_ID_KEY()}>\n";
            next;
        }

        ############################################################################
        # Get the MRN from the database 
        ############################################################################
        $fields{MRN_KEY()} = dbutils_get_mrn_from_brain_id($fields{BRAIN_ID_KEY()});

        ############################################################################
        # Continue if mrn cannot be determined.
        ############################################################################
        if( !$fields{MRN_KEY()} || $fields{MRN_KEY()} == 0 || $fields{MRN_KEY()} == -1 ) {
            print "ERROR: Cound not find brain id <$fields{BRAIN_ID_KEY()}> in database!\n";
            next;
        } 

        
        ############################################################################
        #  Uploading the current surgery.
        ############################################################################
        if( $current_surgery ) {
            if( $fields{CURRENT_SURGERY_DATE_KEY()} ) {
                if( upload_current_diagnosis(\%fields) == 1 ) {
                    print "ERROR: Failed to upload current surgery info:\n";
                    print_row(\%fields);
                } elsif($commit)  {
                    print "SUCCESS: Inserted diagnosis for mrn $fields{MRN_KEY()} on $fields{CURRENT_SURGERY_DATE_KEY()}\n";
                }
            } else {
                print "WARNING: No current surgery date found, skipping row.\n";
                print_row(\%fields);
            }
        }

        ############################################################################
        #  Uploading the prior surgery.
        ############################################################################
        if( $prior_surgery ) {
            if ( $fields{ORIGINAL_SURGERY_DATE_KEY()}  ) {
                if( upload_prior_diagnosis(\%fields) == 1 ) {
                    print "ERROR: Failed to upload original surgery info:\n";
                    print_row(\%fields);
                } elsif($commit)  {
                    print "SUCCESS: Inserted diagnosis for mrn $fields{MRN_KEY()} on $fields{ORIGINAL_SURGERY_DATE_KEY()}\n";
                }
            } else {
                print "WARNING: No original surgery date found, skipping row.\n";
                print_row(\%fields);
            }
        }

        ############################################################################
        #  Uploading acquisition info.
        ############################################################################
        if( $acquisition ) {
            if( $fields{SF_NUMBER_KEY()}  ) {
                if ( upload_surgery_acquisition_info(\%fields) == 1 ) {
                    print "ERROR: Failed to upload acquisition info:\n";
                    print_row(\%fields);
                } elsif ($commit ) {
                    print "SUCCESS: Inserted surgery acquisition info for sf $fields{SF_NUMBER_KEY()}\n";
                }
            } else {
                print "WARNING: Could not identify sf number found, skipping row.\n";
                print_row(\%fields);
            }
        }
    }
}
dbutils_close_db_connection();

#
# Cleans the given row
#
sub clean_row( $ )
{
    my %fields = %{$_[0]};

    ##########################################
    # Clean up brain id, extract b, s, et
    ##########################################
    if ($fields{BRAIN_ID_KEY()} =~ /^b(.+)/) {
        $fields{BRAIN_ID_KEY()} = $1;
    } elsif ($fields{BRAIN_ID_KEY()} =~ /^s(.+)/) {
        $fields{BRAIN_ID_KEY()} = $1;
    } elsif ($fields{BRAIN_ID_KEY()} =~ /^et(.+)/) {
        $fields{BRAIN_ID_KEY()} = $1;
    } 

    ############################################################################
    # Clean up exam id, extract t
    ############################################################################
    if (defined($fields{EXAM_ID_KEY()}) && $fields{EXAM_ID_KEY()} =~ /^t(.+)/) {
        $fields{EXAM_ID_KEY()} = $1;
    } 


    ############################################################################
    # Clean up  grade, change from int to string
    ############################################################################
    if( defined($fields{CURRENT_GRADE_KEY()}) ) {
        if ($fields{CURRENT_GRADE_KEY()} =~ /^0$/) {
            $fields{CURRENT_GRADE_KEY()} ="Treatment Effect";
        } elsif ($fields{CURRENT_GRADE_KEY()} =~ /^1$/) {
            $fields{CURRENT_GRADE_KEY()} ="Grade I";
        } elsif ($fields{CURRENT_GRADE_KEY()} =~ /^2$/) {
            $fields{CURRENT_GRADE_KEY()} ="Grade II";
        } elsif ($fields{CURRENT_GRADE_KEY()} =~ /^3$/) {
            $fields{CURRENT_GRADE_KEY()} ="Grade III";
        } elsif ($fields{CURRENT_GRADE_KEY()} =~ /^4$/) {
            $fields{CURRENT_GRADE_KEY()} ="Grade IV";
        } else {
            print "ERROR: Cannot recognize grade: <$fields{CURRENT_GRADE_KEY()}>\n";
        }
    }

    ############################################################################
    # Clean up grade, change from int to string
    ############################################################################
    if( defined($fields{ORIGINAL_GRADE_KEY()}) ) {
        if ($fields{ORIGINAL_GRADE_KEY()} =~ /^0$/) {
            $fields{ORIGINAL_GRADE_KEY()} ="Treatment Effect";
        } elsif ($fields{ORIGINAL_GRADE_KEY()} =~ /^1$/) {
            $fields{ORIGINAL_GRADE_KEY()} ="Grade I";
        } elsif ($fields{ORIGINAL_GRADE_KEY()} =~ /^2$/) {
            $fields{ORIGINAL_GRADE_KEY()} ="Grade II";
        } elsif ($fields{ORIGINAL_GRADE_KEY()} =~ /^3$/) {
            $fields{ORIGINAL_GRADE_KEY()} ="Grade III";
        } elsif ($fields{ORIGINAL_GRADE_KEY()} =~ /^4$/) {
            $fields{ORIGINAL_GRADE_KEY()} ="Grade IV";
        } else {
            print "ERROR: Cannot recognize grade: <$fields{ORIGINAL_GRADE_KEY()}>\n";
        }
    }
        
    ############################################################################
    # Clean up screenshots, convert to upper case and ensure it is YES or NO
    ############################################################################
    $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} = uc($fields{CURRENT_SURGERY_SCREENSHOTS_KEY()});

    if(defined($fields{CURRENT_SURGERY_SCREENSHOTS_KEY()}) && $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} ne ""
       && $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} ne "YES" && $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} ne "NO" ) {

        print "WARNING: Invalid value for screenshots <$fields{CURRENT_SURGERY_SCREENSHOTS_KEY()}> will be ignored\n";
        $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} = "";
    }
        
    return %fields;

}


#
# Prints all the fields for the given hash.
#
sub print_row( $ )
{
    my %fields = %{$_[0]};
    print "*********************************************************************\n";
    while ((my $key, my $value) = each(%fields)){
         print "<$key -----> $value>\n";
    }
    print "*********************************************************************\n";


}


#
# Uploads prior diagnosis based on fields from the given row hash.
#
sub upload_prior_diagnosis( $ )
{
    my %fields = %{$_[0]};
    my $error = 0;
    my $surgeon = "";
    my $sfn = "";
    my $mrn = $fields{MRN_KEY()};
    my $tnum = ""; # We don't have t-nums for prior surgeries
    my $surgery_comments = "";
    my $diagnosis_comments = "";
    my $resection = "";

    # Lets get the dates from the date field
    my $date      = trim( $fields{ORIGINAL_SURGERY_DATE_KEY()} );
    my $grade     = trim( $fields{ORIGINAL_GRADE_KEY()} );
    my $hist_type = trim( $fields{ORIGINAL_HIST_TYPE_KEY()} );
    
    return execute_diagnosis_script( $mrn, $tnum, $sfn, $date, $surgeon, $resection, $hist_type, $grade, $surgery_comments, $diagnosis_comments );

}


#
# Uploads current diagnosis based on fields from the given row hash.
#
sub upload_current_diagnosis( $ )
{
    my %fields = %{$_[0]};
    my $error = 0;
    my $mrn                = $fields{MRN_KEY()};
    my $sfn                = $fields{SF_NUMBER_KEY()};
    my $date               = $fields{CURRENT_SURGERY_DATE_KEY()};
    my $surgeon            = "";
    my $resection          = "";
    my $grade              = trim( $fields{CURRENT_GRADE_KEY()} );
    my $hist_type          = trim( $fields{CURRENT_HIST_TYPE_KEY()} );
    my $surgery_comments   = "";
    my $diagnosis_comments = "";

    # Lets extract the number from tnum;
    my $tnum               = $fields{EXAM_ID_KEY()};
    
    if(  !$mrn || $mrn eq "" ) {
        print "ERROR: Missing mrn!\n";
        return 1;
    } elsif ( !$date || $date eq "" ) {
        print "ERROR: Missing surgery date!\n";
        return 1;
    } else {
        return execute_diagnosis_script( $mrn, $tnum, $sfn, $date, $surgeon, $resection, $hist_type, $grade, $surgery_comments, $diagnosis_comments);
    }

}


#
# Executes the insert_bt_diagnosis scripte for the given arguments.
#
sub execute_diagnosis_script( $$$$$$$$$$ ) 
{
    my ($mrn, $tnum, $sf_num, $date, $surgeon, $resection_extent, $hist_type, $hist_grade, $surgery_comments, $diagnosis_comments) = @_;

    my $cmd;
    my $insert_diagnosis_script    = "insert_bt_diagnosis_event";
    if ( $script =~ m/\.dev$/ ) {
        $insert_diagnosis_script .= ".dev";
    }
    #
    # Lets insert the diagnosis and surgery information
    #
    $cmd = "$insert_diagnosis_script --mrn " . $mrn;
    if( $sf_num && $sf_num ne "" ) {
        $cmd .= " --sfn $sf_num ";
    }
    if ( !dbutils_is_partial_date_valid( $date, 0 ) ) {
        print "\n\nERROR:  incorrect date format for diagnosis: $date\n\n";
        return 1;
    }

    $cmd .= " --date $date ";
    $cmd .= " --study $study ";

    if( $tnum && $tnum ne "" ) {
        $cmd .= " --tnum $tnum ";
    }
    if( $surgeon && $surgeon ne "" ) {
        $cmd .= " --surgeon \"$surgeon\" ";
    }
    if( $hist_type && $hist_type ne "" ) {
        $cmd .= " --hist \"$hist_type\" ";
    }
    if( $hist_grade && $hist_grade ne "" ) {
        $cmd .= " --grade \"$hist_grade\" ";
    }
    if( $resection_extent && $resection_extent ne "" ) {
        $cmd .= " --resection_extent \"$resection_extent\" ";
    }
    if( $surgery_comments && $surgery_comments ne "" ) {
        $cmd .= " --surgery_comments \"$surgery_comments\" ";
    }
    if( $diagnosis_comments && $diagnosis_comments ne "" ) {
        $cmd .= " --diagnosis_comments \"$diagnosis_comments\" ";
    }
    if ( defined($commit) ) {
        if( system($cmd) ) {
            print "===========================================.\n\n";
            print "ERROR: failed running $cmd\n";
            print "===========================================.\n\n";
            return 1;
        }
    } else {
        print "Execute Command: $cmd\n";
    }
    return 0;
}


sub upload_surgery_acquisition_info( $ )
{
    my %fields = %{$_[0]};

    my $sf_num      = trim( $fields{SF_NUMBER_KEY()} );
    my $navigation  = trim( $fields{CURRENT_SURGERY_NAVIGATION_KEY()} );
    my $screenshots = trim( $fields{CURRENT_SURGERY_SCREENSHOTS_KEY()} );
    if( !defined($sf_num) || $sf_num eq "" ) {
        print "=====================================================.\n\n";
        print "ERROR: failed updating acquisition info, no sf number.\n";
        print "=====================================================.\n\n";
        return 1;
    }

    if ( defined($commit) ) {
        if( dbutils_update_surgery_acquisition_info( $sf_num, $navigation, $screenshots, "" ) == -1  ) {
            print "=====================================================.\n\n";
            print "ERROR: failed updating acquisition info.              \n";
            print "=====================================================.\n\n";
            return 1;
        }
    } else {
            if( !defined( $sf_num ) ) {
                $sf_num = "null";
            }
            if( !defined( $navigation ) ) {
                $navigation = "null";
            }
            if( !defined( $screenshots ) ) {
                $screenshots = "null";
            }
            print "Executing dbutils_update_surgery_acquisition_info( $sf_num, $navigation, $screenshots, \"\" )\n";
    }
    return 0;
}


sub get_hash_key ( $ )
{

    my ($column_index) = @_; 
    my $key = "";
    if( $column_index == 1 ) {
        $key = BRAIN_ID_KEY; 
    } elsif ( $column_index == 2 ) {
        $key = EXAM_ID_KEY;
    } elsif ( $column_index == 0 ) {
        $key = SF_NUMBER_KEY;
    } elsif ( $column_index == 3 ) {
        $key = CURRENT_SURGERY_DATE_KEY;
    } elsif ( $column_index == 13 ) {
        $key = CURRENT_GRADE_KEY;
    } elsif ( $column_index == 12 ) {
        $key = CURRENT_HIST_TYPE_KEY;
    } elsif ( $column_index == 26 ) {
        $key = CURRENT_SURGERY_NAVIGATION_KEY;
    } elsif ( $column_index == 28 ) {
        $key = CURRENT_SURGERY_SCREENSHOTS_KEY;
    } elsif ( $column_index == 4 ) {
        $key = ORIGINAL_SURGERY_DATE_KEY;
    } elsif ( $column_index == 11 ) {
        $key = ORIGINAL_GRADE_KEY;
    } elsif ( $column_index == 10 ) {
        $key = ORIGINAL_HIST_TYPE_KEY;
    }
    return $key; 
}

sub trim ( $ )
{
    my( $string ) = @_;
    if( $string ) {
        $string =~ s/^\s+//;
        $string =~ s/\s+$//;
    }
    return $string;
}
###############################################################################
#
#   POD Usage docs
#
###############################################################################

=head1 NAME

upload_project_2

=head1 SYNOPSIS

upload_project_2 [-c] [-d] -f filename 

        -f              filename        the filename of the spreadsheet to upload 
        -c                              commit data           
        --current_surgery               upload current surgery data 
        --prior_surgery                 upload prior surgery data 
        --acquisition                   upload acquisition data 

=head1 DESCRIPTION

Program uploads presurgery data to the brain DB. 


=cut

